stages:
  - test
  - build
  - migrate
  - deploy

variables:
  GO_SRC: go/src/
  GO_PKG: go/pkg/
  C_RESULT: ci-results/

image: docker:latest

services:
  - docker:dind

test:
  stage: test
  image: $MONK_DOCKER_PRECOMPILED
  coverage: '/All files\s*\|\s*([0-9.]+)/'
  cache:
    key: $CI_PIPELINE_ID
    paths:
      - $GO_SRC
      - $GO_PKG
      - $C_RESULT
    policy: push
  services:
    - 'postgres:latest'
  script:
    - for i in $(printenv | cut -d '=' -f 1); do ENV_WORD=$(echo $i | cut -d '_' -f 1); if [ "$ENV_WORD" = "TEST" ]; then export ${i/TEST_/}="${!i}"; fi; done
    - make protocomplile
    - go get
    - make lint
    - make test
    - mkdir -p $GO_SRC $GO_PKG $C_RESULT
    - cp -r "$GOPATH"/src $GO_SRC
    - cp -r $GOPATH/pkg $GO_PKG
    - cp -r ./ $C_RESULT
  variables:
    POSTGRES_USER: $TEST_POSTGRES_USER
    POSTGRES_PASSWORD: $TEST_POSTGRES_PASSWORD

build:
  stage: build
  cache:
    key: $CI_PIPELINE_ID
    paths:
      - $GO_SRC
      - $GO_PKG
      - $C_RESULT
    policy: pull
  script:
    - mv $C_RESULT /
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

migrate:
  stage: migrate
  image: $MONK_DOCKER_PRECOMPILED
  cache:
    key: $CI_PIPELINE_ID
    paths:
      - $GO_SRC
      - $GO_PKG
    policy: pull
  script:
    - for i in $(printenv | cut -d '=' -f 1); do ENV_WORD=$(echo $i | cut -d '_' -f 1); if [ "$ENV_WORD" = "PROD" ]; then export ${i/PROD_/}="${!i}"; fi; done
    - make setup
    - make migrate

deploy:
  stage: deploy
  script:
    - echo "CHECK!!!"
  only:
    - master